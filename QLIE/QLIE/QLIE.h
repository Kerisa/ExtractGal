
#pragma once

#include <array>
#include <string>
#include <vector>

#pragma pack(1)


typedef struct
{
    char Maigc[16];			// "FilePackVer3.0"
    unsigned long FileNum;
    unsigned long long IndexOffset;
} PACKHEADER;


typedef struct
{
    char Magic[16];			// "HashVer1.3"
    unsigned long unKnown1;
    unsigned long FileNum;
    unsigned long unKnown2;	// FileNum * 2
    unsigned long DataSize;
} HASHHEADER13;


typedef struct
{
    HASHHEADER13 HashHeader13;
    unsigned long unKnown3;		// "HashVer1.3" 只要去掉下面的两行再改一下验证的Magic就可以
    char ZeroBytes[32];
} HASHHEADER14;


typedef struct
{
    unsigned long Magic;	// 0xff435031
    unsigned long Flag;
    unsigned long unCompressLen;
} COMPRESSHEADER;


typedef struct
{
    unsigned long long	Offset;
    unsigned long		CompressLen;
    unsigned long		unCompressLen;
    unsigned long		IsCompressed;
    unsigned long		IsEncrypted;
    unsigned long		Hash;
    unsigned long		Key;
    std::string			Name;
    std::wstring        Wname;
    std::string         HashVer;
} PACKIDX;


typedef struct
{
    unsigned long Magic;		 // "DPNG" - 0x474e5044
    unsigned long unKnown1;
    unsigned long IdxNum;
    unsigned long Width;
    unsigned long Height;
} DPNGHEADER;


typedef struct
{
    unsigned long Offsetx;
    unsigned long Offsety;
    unsigned long Width;
    unsigned long Height;
    unsigned long Length;
    unsigned long unKnown1;
    unsigned long unKnown2;
} DPNGIDX;


#pragma pack()

const std::string PackVer3_0 = "FilePackVer3.0";
const std::string PackVer3_1 = "FilePackVer3.1";
const std::string HashVer1_3 = "HashVer1.3";
const std::string HashVer1_4 = "HashVer1.4";


class Mangekyoo_1_2_3
{
public:
    static int SplitFileNameAndSave(const wchar_t *cur_dir, const wchar_t *file_name, void* unpack, unsigned long file_length);
    static int Decompress(void* HashData, uint32_t HashDataLen, uint8_t* *ppunCompressData, uint32_t* punCompressDataLen);

    uint32_t    GenerateKey(void* Buf, uint32_t Len);
    int         GetKeyBuf(uint8_t* *ppExeKeyBuf, uint32_t* pdwExeKeyLen, uint8_t* *ppKeyFile, uint32_t* pdwKeyFileLen);
    void        Decode(void* Buf, uint32_t Len, uint32_t Key);
    int         Decode_Sub1(uint32_t dwSeed, uint32_t* arrDecode, uint32_t* pSubFlag);
    void        Decode_Sub2(void* Buf, uint32_t Len, uint32_t* arrDecode);
    uint32_t    Decode_Sub3(uint32_t* arrDecode, uint32_t* pSubFlag);
    int         DecodeFileData(void* PackData, const PACKIDX& Idx, uint8_t* pExeKey, uint32_t dwExeKeyLen, uint8_t* pKeyFile, uint32_t dwKeyFileLen);
    int         HandleDPNG(uint8_t* Data, uint32_t Len, const wchar_t *CurDir, const wchar_t *UniName);

    int         GetPackageDirectory(const HANDLE hPack, const PACKHEADER *ph, std::vector<PACKIDX>& Idx);
    int         ExtractResource(const HANDLE hPack, const std::vector<PACKIDX>& Idx, const wchar_t *CurDir, const wchar_t *PackName);
    int         Entrance(const wchar_t *CurDir, const wchar_t *PackName);
};


const unsigned char Mangekyoo5[1024] = {
    0x73, 0xA5, 0xCC, 0x43, 0x00, 0x87, 0x66, 0x36, 0xC3, 0x37, 0x96, 0x40, 0x91, 0xAD, 0x12, 0xFA,
    0xA1, 0xB8, 0xA9, 0x22, 0xCE, 0xD9, 0x25, 0xAB, 0x98, 0x34, 0xE2, 0xC9, 0xE8, 0x9C, 0xF2, 0x1B,
    0x45, 0x37, 0x96, 0x25, 0xD3, 0x74, 0x6B, 0xDB, 0x04, 0xC1, 0x00, 0xE9, 0x0D, 0xD8, 0xA5, 0xE0,
    0xE0, 0x41, 0x82, 0x64, 0xD5, 0x83, 0x4B, 0xDE, 0x47, 0x03, 0xCF, 0x30, 0xFA, 0xD1, 0x50, 0x7A,
    0xC1, 0x64, 0xBE, 0x62, 0x08, 0x4D, 0xBA, 0xBC, 0xDC, 0x6F, 0x05, 0x74, 0x3A, 0x78, 0x5E, 0xF2,
    0x5C, 0x3A, 0x65, 0x0C, 0xC4, 0x01, 0x8C, 0xFC, 0x86, 0xAC, 0x2A, 0xDB, 0x12, 0x60, 0x66, 0x28,
    0x55, 0x1D, 0x48, 0xB6, 0x33, 0x7B, 0x9E, 0x49, 0xFA, 0x0B, 0x97, 0x10, 0x5B, 0x6C, 0xD5, 0x61,
    0xE5, 0x4D, 0x53, 0xB9, 0x1F, 0xEE, 0x83, 0x86, 0x29, 0xDE, 0x87, 0xBF, 0x86, 0x2C, 0x04, 0xA3,
    0x2D, 0xAD, 0x70, 0x84, 0xC2, 0xDC, 0xD6, 0x8D, 0x96, 0xED, 0xD4, 0x0D, 0xFB, 0x3C, 0x96, 0xD9,
    0xFF, 0x46, 0x22, 0x17, 0xB8, 0x5F, 0x3F, 0xBA, 0x52, 0xA0, 0x6F, 0x44, 0x01, 0x41, 0xBC, 0x1A,
    0x5D, 0x6D, 0xE9, 0xA1, 0x58, 0x50, 0xEA, 0xC6, 0x4A, 0x3C, 0x7B, 0xDB, 0x1F, 0xB9, 0x09, 0x0F,
    0x12, 0x2B, 0x3A, 0x59, 0x43, 0xDB, 0xBE, 0xF6, 0x17, 0x3A, 0x67, 0x91, 0x52, 0x72, 0x00, 0xC3,
    0x0C, 0xDF, 0x55, 0xE5, 0x02, 0x4F, 0x0E, 0x90, 0x2B, 0x92, 0x74, 0xDE, 0xE8, 0x77, 0x0C, 0xF3,
    0xC7, 0xF7, 0x96, 0x8D, 0xCA, 0x58, 0x45, 0xEF, 0x8B, 0x2E, 0xBA, 0x65, 0x24, 0xA1, 0xD6, 0x37,
    0xE0, 0x78, 0xA0, 0x4E, 0x2F, 0x3C, 0xA8, 0xE9, 0x8E, 0x42, 0xED, 0xB5, 0xCD, 0x1C, 0x8C, 0x51,
    0xB9, 0xEB, 0x40, 0x1A, 0x2E, 0x8D, 0x7F, 0x6F, 0x62, 0x22, 0x98, 0xAF, 0x82, 0x51, 0x0B, 0xDE,
    0xAC, 0x06, 0xA2, 0x54, 0x15, 0xB4, 0x79, 0x30, 0x5A, 0x20, 0x14, 0x36, 0x10, 0xA8, 0xD5, 0xA2,
    0xC7, 0x50, 0x71, 0x3B, 0x77, 0xE8, 0x86, 0x42, 0x4B, 0x78, 0x0C, 0x52, 0x1D, 0xB1, 0x3A, 0x70,
    0xF3, 0x75, 0x6A, 0x99, 0xB5, 0x8D, 0xBC, 0x37, 0xC2, 0xB2, 0xF7, 0xD9, 0x4E, 0xE4, 0x4B, 0x8A,
    0x92, 0xFB, 0xE4, 0x98, 0xB7, 0xF5, 0xAB, 0xA7, 0x17, 0x2F, 0x19, 0x14, 0x97, 0x91, 0x97, 0xA8,
    0xD8, 0xFF, 0x42, 0x52, 0x43, 0x18, 0x41, 0x82, 0x96, 0xB9, 0x34, 0x69, 0x89, 0x08, 0xAC, 0xB2,
    0xEB, 0xBC, 0x6C, 0xB1, 0xFC, 0xFD, 0xF7, 0xAE, 0x28, 0xA2, 0x53, 0xD3, 0x40, 0xBF, 0xCD, 0x5C,
    0xA3, 0xFE, 0x23, 0xCE, 0x4C, 0x00, 0xED, 0x44, 0xBA, 0x45, 0x47, 0x52, 0x23, 0x91, 0x79, 0xBE,
    0x19, 0x1A, 0xBF, 0xC6, 0xAB, 0x7B, 0xD5, 0xB4, 0x70, 0xDD, 0xB5, 0xC8, 0x6B, 0xAE, 0x68, 0xF2,
    0x62, 0xF2, 0xF3, 0xDC, 0x8E, 0x51, 0x84, 0x97, 0x24, 0x36, 0xD3, 0x80, 0x5A, 0x79, 0x42, 0xD4,
    0xA7, 0x3D, 0x27, 0x49, 0xA1, 0x0F, 0x50, 0xA5, 0x75, 0x9B, 0x93, 0x39, 0x7B, 0xD0, 0x28, 0xD7,
    0x8C, 0x74, 0x9D, 0x35, 0xEE, 0xE6, 0xD6, 0x53, 0xE7, 0x65, 0x75, 0xD5, 0xDB, 0x60, 0xF7, 0x20,
    0x62, 0xDC, 0x15, 0x31, 0xB8, 0x77, 0xE2, 0x89, 0x5B, 0xCC, 0x86, 0x98, 0xF8, 0x05, 0x6C, 0x6D,
    0x8B, 0x7D, 0x1A, 0x73, 0x1B, 0x78, 0x40, 0xC1, 0x9F, 0x66, 0x52, 0x01, 0x1E, 0x79, 0xDA, 0x4B,
    0x7E, 0x35, 0xE2, 0x53, 0x66, 0x6C, 0x8A, 0x34, 0x1D, 0xFE, 0x03, 0x78, 0xC9, 0x4D, 0xF2, 0xAB,
    0xA2, 0xBB, 0xD4, 0x0C, 0x2F, 0x7A, 0x8A, 0x7B, 0xF7, 0x70, 0xE4, 0x4D, 0x8E, 0x99, 0x01, 0x1D,
    0xFA, 0xB8, 0x3D, 0xEA, 0x07, 0x2E, 0x5A, 0x0B, 0x2F, 0x70, 0xD6, 0xFE, 0x15, 0xA9, 0x26, 0x80,
    0xC2, 0xC4, 0x44, 0xFE, 0xC4, 0x21, 0x22, 0x65, 0x9E, 0xB7, 0x0D, 0xC4, 0xCC, 0xED, 0xD2, 0x3A,
    0x10, 0xB9, 0xAC, 0x6B, 0x1B, 0x7B, 0x57, 0x28, 0x17, 0x1B, 0xDE, 0x66, 0xFF, 0x8E, 0x47, 0x36,
    0x4B, 0x7B, 0xBC, 0x01, 0x2B, 0x81, 0xA3, 0x1F, 0x9D, 0xAD, 0x4A, 0x23, 0xE2, 0x65, 0x4E, 0x69,
    0xA2, 0x65, 0x71, 0x94, 0x74, 0x00, 0x30, 0x04, 0x0E, 0x7C, 0x22, 0xC7, 0x21, 0x86, 0x75, 0xFD,
    0x18, 0x6D, 0x4A, 0xD9, 0x62, 0x49, 0x10, 0xAE, 0x7C, 0xA5, 0xB6, 0x20, 0x0F, 0xCE, 0xF2, 0xBC,
    0x82, 0x53, 0x94, 0x59, 0xDA, 0xE9, 0x47, 0xE5, 0x7D, 0x73, 0xB6, 0x87, 0x38, 0x07, 0x61, 0xEF,
    0x42, 0xB6, 0xDD, 0xCE, 0x20, 0xC9, 0x79, 0x53, 0xF7, 0x74, 0xD5, 0xC7, 0x67, 0xF0, 0x60, 0x2F,
    0x92, 0x9C, 0xF0, 0x0C, 0x3E, 0xC9, 0xAF, 0xE6, 0x0A, 0xA5, 0x8D, 0x8C, 0xE0, 0xAE, 0xAC, 0xE5,
    0xC3, 0x57, 0xAD, 0x32, 0xF4, 0x71, 0x03, 0x97, 0xB6, 0xC4, 0x92, 0xA4, 0x9E, 0xAD, 0x9C, 0xA7,
    0x23, 0x5F, 0xAD, 0x56, 0x52, 0x3A, 0x37, 0xCE, 0xCD, 0x95, 0x74, 0x7B, 0x49, 0x6D, 0x82, 0x54,
    0x17, 0x69, 0x6B, 0xBF, 0xF8, 0x58, 0x2E, 0xEB, 0x6A, 0xF8, 0x99, 0x71, 0x94, 0x3A, 0x48, 0x9C,
    0x2B, 0xC1, 0x21, 0x1F, 0x68, 0xEA, 0x5D, 0x5B, 0x3B, 0x5C, 0xD5, 0x6B, 0x25, 0x75, 0xB7, 0x52,
    0x8E, 0x79, 0xE5, 0xB7, 0x87, 0x51, 0x83, 0xAB, 0x17, 0x6E, 0xDF, 0x49, 0x6B, 0xF1, 0xFE, 0x89,
    0x87, 0xEE, 0xCF, 0x09, 0x9B, 0x07, 0x8F, 0x88, 0x62, 0xBE, 0x5A, 0x99, 0xBA, 0x89, 0x29, 0xA9,
    0x80, 0xBA, 0x9D, 0x8C, 0xE4, 0xCD, 0x83, 0xFA, 0xAE, 0x89, 0x23, 0xF4, 0x1B, 0x59, 0xF6, 0x80,
    0x79, 0xA6, 0x60, 0x05, 0x0F, 0x21, 0x95, 0xDF, 0xB3, 0x26, 0x1D, 0x71, 0xCA, 0x07, 0xBA, 0xBF,
    0xAE, 0xF1, 0xAF, 0xFD, 0xE9, 0x82, 0x66, 0x57, 0x1D, 0xB0, 0x05, 0x52, 0xBD, 0x3A, 0xB5, 0x46,
    0x72, 0x25, 0x7C, 0x78, 0x78, 0x0F, 0xA3, 0x9A, 0x72, 0x6E, 0x0B, 0x1C, 0x91, 0x11, 0x0B, 0xF0,
    0xD8, 0x4E, 0x8E, 0x5A, 0x66, 0x76, 0x53, 0x7A, 0x11, 0x7B, 0xCA, 0x80, 0xA0, 0x82, 0x30, 0xD2,
    0x6C, 0xD3, 0xA8, 0xD6, 0xB8, 0x84, 0xE7, 0xA1, 0x86, 0x40, 0x11, 0x4A, 0xB1, 0xC7, 0xA5, 0x30,
    0x51, 0x33, 0xA2, 0xEF, 0x9B, 0x64, 0xF3, 0xFE, 0xC6, 0x05, 0x27, 0x47, 0xB1, 0x31, 0x60, 0x53,
    0xD1, 0xC7, 0xAF, 0xF0, 0x21, 0x69, 0xB5, 0x05, 0x11, 0x28, 0x21, 0x81, 0x07, 0xEB, 0xB4, 0x9A,
    0x1B, 0xED, 0x02, 0x13, 0xF1, 0xB6, 0xFE, 0xC7, 0x0E, 0x5E, 0x78, 0x7B, 0xDA, 0xA5, 0x4E, 0xA9,
    0x87, 0xFA, 0x93, 0x88, 0xDC, 0x16, 0xB3, 0xA2, 0xB7, 0x2D, 0x63, 0x60, 0x85, 0x1B, 0x31, 0x9F,
    0x86, 0x56, 0xFF, 0xC7, 0xC9, 0xAF, 0x6B, 0x32, 0xB3, 0x03, 0x8D, 0x72, 0x13, 0xA8, 0x83, 0x50,
    0x18, 0xEE, 0xB9, 0x8A, 0xF5, 0x73, 0x39, 0x65, 0xEC, 0xF0, 0x77, 0xFF, 0xC7, 0xE8, 0x2A, 0xE4,
    0xC1, 0x62, 0x0B, 0xD9, 0x7B, 0x11, 0xCE, 0x5D, 0x3C, 0x70, 0x47, 0x92, 0x2C, 0xAB, 0x12, 0xBB,
    0xBC, 0x70, 0x00, 0x3C, 0x83, 0xDD, 0x9E, 0x39, 0x5D, 0xC4, 0x09, 0x31, 0x1B, 0xF0, 0x1D, 0xF1,
    0xA3, 0xB3, 0x39, 0xE1, 0xA8, 0xE4, 0x64, 0x14, 0x89, 0xE4, 0xF8, 0x7A, 0xE3, 0x13, 0x12, 0x32,
    0xD7, 0x4C, 0xFE, 0x91, 0xCD, 0xAB, 0x0B, 0x0C, 0x1E, 0x99, 0x58, 0x32, 0x67, 0x79, 0xAA, 0xB0,
    0x84, 0x4A, 0x57, 0xE9, 0x14, 0x9B, 0xD4, 0x2D, 0x34, 0x86, 0x05, 0x6C, 0xFD, 0x33, 0x05, 0x89,
    0xB8, 0x17, 0x82, 0x70, 0x35, 0x84, 0x65, 0x4E, 0x48, 0x95, 0x0E, 0x16, 0x6C, 0x71, 0x0F, 0xE9
};

const uint32_t Mangekyoo4[256] = {
    0x20ECBA48, 0x96BB6008, 0x8E88126E, 0x352F5BD7, 0xD7DA5F02, 0xB79F9A11, 0xCA7D6C03, 0x073FFEE3, 0x6C46DE6C, 0x6F81DB03,
    0x2DED61E0, 0x9D6059E0, 0xB644A8D6, 0xE3C19CE1, 0x0D7125B6, 0xB4E439E7, 0x14ACDD13, 0x7769A599, 0xA79E759E, 0xA80DCD4D,
    0xB9CC47AE, 0x0CD89750, 0xE1F76F8A, 0xD9830589, 0xC65C722E, 0x4A76B0EF, 0xE3D336A1, 0x8A6F136F, 0x3990CFC8, 0x3E81AF73,
    0x3911747C, 0xC2A957E0, 0xECD27046, 0xEEF388F7, 0x2F12CC36, 0x7DE71CAB, 0xBB2003C9, 0x6E62F353, 0x03BE9CC2, 0x591FC763,
    0xA6FB34C4, 0xC95473DE, 0xF9E46924, 0x20A8B4F5, 0xB59C3202, 0xB74E2D65, 0x7E3ACF9B, 0xEF5FFC5D, 0xA7C247F6, 0xEE652C6F,
    0xEBBF63C6, 0x1CEDB2E0, 0x9969C9E8, 0xB159AC55, 0x4AEADD0E, 0x1C26C493, 0x14A39FAF, 0xAB24FEC3, 0xBABFC940, 0x1FB74051,
    0x0DBB7F4C, 0x7BB7798A, 0x12523F0E, 0xA4495F55, 0x1D21C0E6, 0x71A4DC47, 0xAE8ADDF5, 0x4BC48003, 0x212286B6, 0x314BFE2B,
    0xE213168E, 0x07F34E94, 0xD1B3BE70, 0x2B44E737, 0x65D2C6AA, 0x09387D95, 0x667AC551, 0x0467A31B, 0x3311BF1E, 0xE42647FB,
    0xF2192FBC, 0x20E3B49C, 0x8F635C64, 0xBA053EED, 0x90C21690, 0x691BCA2F, 0x20783A1B, 0xC6DA9BCD, 0x26B5A944, 0x90398AC1,
    0x0069D7B0, 0x8B90A904, 0xDF9ABE31, 0xC08E2C90, 0x0E84FAF5, 0x38AA9ED1, 0xAE42DAF1, 0x372D8AF8, 0xC71DC61C, 0x23E9B3DB,
    0xCE2FE84B, 0x83ABE724, 0x1A6E1793, 0x25E6C650, 0x3A07F3BE, 0x69E96486, 0x07CD5601, 0xCBD73CA6, 0x7C1D1311, 0xE6DE8FE8,
    0xD40F07CE, 0x50C2DAA8, 0xEB6F8282, 0xF74861CB, 0xCBEE1B52, 0x9A34CE4E, 0xDDC69006, 0x5AE8FEF6, 0x9F80A57C, 0xCCA4F043,
    0xF74CBED4, 0x2B83F6DB, 0x677ED7D2, 0xF6BDBCE8, 0xC2DD4038, 0xEE4AA452, 0x1C046092, 0xF3FC3B4F, 0xE385951B, 0x97384739,
    0x1A4BD617, 0x21D85406, 0x1492424A, 0x8BBDA984, 0xFE893FD7, 0xEB3174C4, 0x7FE0A3B8, 0xBD8314CD, 0x22EA3F5A, 0xE896A145,
    0x3C64BC8F, 0x0C933C42, 0xEF66BE9A, 0x4FABE80F, 0x4F4ECCED, 0xCEACB557, 0xE3D1947E, 0x186FB647, 0xD382D8CD, 0xD23FA3DC,
    0x43AE7EA9, 0xB507D6C7, 0xD187F7D6, 0x04A4A654, 0x92179493, 0x329C35AB, 0x187B7583, 0x13E1BF56, 0xA12DC1E5, 0x1F435CE4,
    0x0843F786, 0xDF5A9D56, 0xF89B0035, 0xC7A8D016, 0x5617AF0B, 0x8B3BF28D, 0xED009028, 0xEFF269AA, 0x30A30CA6, 0xA052F8AD,
    0x8661EC44, 0x5C968742, 0x91130287, 0xC1A2D86B, 0xF5FE5344, 0x1EE296F0, 0xCFEFC1AF, 0x742AEEC0, 0xAB2BE334, 0x5E5DED9E,
    0x376E8A9A, 0xE7783207, 0x3B8187B0, 0x40CABA61, 0xE8DF9010, 0x8CFF5D65, 0x7053E118, 0x4258C004, 0xD0860991, 0x0A360306,
    0xFAFBFEC5, 0x04F4E493, 0xD155E946, 0xA8A6AD1E, 0x6B9FADA5, 0x902CB8C9, 0x2ED84CE9, 0x35D41D05, 0x11DFE7C5, 0x954DFC1C,
    0xC7B5C928, 0x5315AA6E, 0x01BECC77, 0x657C7823, 0xAF2689CF, 0x28875C0B, 0x5A187B93, 0xA2117BD4, 0xE7820AB4, 0xFA359E0F,
    0x2710D1D3, 0xD62AA2D2, 0x61303AC1, 0xA2078E95, 0xA217A056, 0x1C1DC8B2, 0xCCE7B65E, 0x8084E97B, 0xD14AED20, 0x47DE3AC5,
    0x8753A653, 0x10689FFD, 0xA6CDE78E, 0x7460F50E, 0x1581C04D, 0xA420C41A, 0xF39ECE0A, 0x8F50E1FD, 0x31F37CB7, 0xE3BB023A,
    0xAFF7AF34, 0xB1F9200E, 0xA2FAEB1C, 0x0D7ECD3C, 0x8ABAC141, 0x7701EDB1, 0xCAE4C399, 0x3F3FB038, 0xE8569746, 0xCDFD8A4A,
    0xA8745604, 0x42C2DB14, 0x3EC84F17, 0xB98F5435, 0x5115FE06, 0xBA33CF0A, 0x3AF73C5F, 0x1C064AFE, 0xFA92F734, 0x7A3C7BF7,
    0x3FF51525, 0x5BBEEB51, 0x8410F480, 0x7D49ECC5, 0xD988E730, 0xD9F97518
};

constexpr std::array<unsigned char, 1024> AnnabelMaidGarden {
  0x1B, 0xE7, 0x79, 0x7E, 0x25, 0xD1, 0xAC, 0x6C, 0x09, 0x35, 0xA9, 0xCC, 0x6C, 0xAB, 0xAB, 0xD1,
  0x32, 0xAA, 0x41, 0xC6, 0x42, 0x9B, 0xE0, 0x8B, 0x5A, 0x2D, 0x2C, 0x76, 0xB1, 0x2D, 0xA4, 0x20,
  0xCF, 0x0B, 0x65, 0x66, 0x01, 0x14, 0x7C, 0x2F, 0x07, 0x8D, 0x48, 0x41, 0x15, 0x17, 0x7C, 0x8D,
  0xBC, 0x8C, 0x2A, 0x42, 0x97, 0xCF, 0x19, 0x3A, 0x98, 0x58, 0x53, 0x92, 0xBE, 0xE1, 0x96, 0xA2,
  0x2D, 0x14, 0x7F, 0xE7, 0x5A, 0x56, 0x87, 0x71, 0x59, 0x04, 0xE0, 0x2F, 0xF8, 0x66, 0xF7, 0xAD,
  0x26, 0x15, 0xCA, 0x91, 0xCF, 0xE0, 0x0E, 0x4E, 0x22, 0x22, 0x5A, 0x77, 0xF9, 0xA1, 0x71, 0xC6,
  0xE2, 0x67, 0x6D, 0x89, 0xE9, 0xE2, 0x1A, 0x46, 0xE7, 0x56, 0x9C, 0x4C, 0x69, 0x32, 0xFC, 0xDC,
  0xA1, 0x37, 0xEA, 0x32, 0x3F, 0x3E, 0x04, 0x4B, 0xAF, 0x46, 0x83, 0x0E, 0xC9, 0x26, 0x91, 0x79,
  0x93, 0xC3, 0x4A, 0xFE, 0xDF, 0x83, 0xE8, 0xC4, 0x60, 0xE0, 0x55, 0x24, 0xC0, 0x80, 0x5D, 0xA9,
  0xB0, 0xCF, 0x3A, 0x56, 0x1F, 0x23, 0xF5, 0xF6, 0xA6, 0x3D, 0x8F, 0x0E, 0x45, 0x04, 0xCA, 0x18,
  0xC6, 0x57, 0xED, 0x27, 0x4D, 0xE5, 0x2C, 0xA6, 0xE8, 0x1A, 0x08, 0x5A, 0x85, 0x8B, 0x4D, 0xB2,
  0x4B, 0x20, 0x5D, 0xC0, 0xE9, 0x5D, 0x40, 0xA0, 0x37, 0x03, 0x8F, 0x9D, 0xF0, 0x89, 0x3B, 0xF9,
  0xD3, 0x05, 0x80, 0x44, 0x0C, 0x73, 0x08, 0xD5, 0x6E, 0xA0, 0x1D, 0x5B, 0x9E, 0xE9, 0x85, 0x02,
  0x7B, 0xAB, 0x9E, 0x4C, 0xFE, 0xB8, 0x3F, 0x80, 0xBB, 0x8D, 0xAB, 0x6B, 0xB1, 0xC6, 0x3B, 0x59,
  0x07, 0x10, 0x37, 0x0B, 0x50, 0xCE, 0x79, 0x98, 0x8E, 0x21, 0xEF, 0x46, 0x51, 0x44, 0x22, 0x8F,
  0x26, 0x43, 0x83, 0x2B, 0x59, 0x55, 0x84, 0xAC, 0xA8, 0xB4, 0x60, 0x2D, 0x5D, 0xB7, 0xBE, 0x60,
  0xBD, 0x68, 0x2D, 0x53, 0x4C, 0x32, 0xF1, 0x9A, 0x61, 0xFD, 0x13, 0xA6, 0xD6, 0xF6, 0x9D, 0xA4,
  0xC5, 0x73, 0x18, 0xAC, 0x69, 0xF8, 0x91, 0xAD, 0xFC, 0x02, 0xBD, 0xD9, 0xB5, 0x0F, 0xA5, 0x4F,
  0xA7, 0x34, 0xAF, 0x04, 0x37, 0x7B, 0x83, 0x54, 0x99, 0x14, 0x2E, 0xA5, 0xC0, 0xCF, 0x49, 0xE8,
  0x2F, 0xCF, 0x72, 0xAE, 0xC3, 0x49, 0x5B, 0xEE, 0x3D, 0xC0, 0x23, 0x86, 0xD2, 0xB3, 0xFC, 0xFF,
  0x65, 0x79, 0xCF, 0xDF, 0xAB, 0x39, 0x77, 0x26, 0x69, 0x48, 0x02, 0x03, 0x82, 0xD2, 0x10, 0xB9,
  0xED, 0xE1, 0x29, 0x23, 0x3A, 0x27, 0x07, 0x70, 0xC6, 0xBB, 0x96, 0x0D, 0x76, 0x80, 0x65, 0xBA,
  0x93, 0xD5, 0x9C, 0x3C, 0xE7, 0x43, 0xA4, 0xC2, 0xF5, 0x03, 0xA3, 0x5A, 0xDE, 0x6D, 0xE1, 0x83,
  0x09, 0xF5, 0xEA, 0x08, 0x83, 0x7E, 0xEF, 0x7A, 0x2E, 0xA2, 0xBD, 0x90, 0x80, 0xD2, 0xAE, 0xCF,
  0xD4, 0xDD, 0x27, 0x41, 0x8A, 0x3D, 0xA8, 0x80, 0xDE, 0x85, 0x12, 0xBA, 0x0D, 0xEF, 0xB8, 0x99,
  0x03, 0x01, 0x62, 0xD7, 0x6B, 0xA1, 0x2A, 0x94, 0x0F, 0x2E, 0xD9, 0x99, 0xBB, 0x2B, 0xD6, 0x03,
  0x2B, 0xD2, 0x2B, 0x4C, 0x0A, 0xEB, 0x8A, 0x27, 0xD3, 0x64, 0x31, 0x79, 0xC8, 0x1C, 0x3E, 0xEC,
  0x30, 0x6C, 0xB0, 0x8E, 0x5D, 0xC5, 0x36, 0xCF, 0xDE, 0x3F, 0xFE, 0x0D, 0xF3, 0x1F, 0x28, 0xBC,
  0x44, 0x85, 0x74, 0x9E, 0xAC, 0x70, 0x8C, 0xB8, 0x9A, 0xF0, 0x6A, 0x09, 0xEA, 0x13, 0x22, 0x52,
  0xA3, 0xF4, 0x2C, 0xD4, 0x77, 0x99, 0xCA, 0x4B, 0x27, 0xE0, 0xF1, 0x87, 0x7C, 0xC1, 0xC0, 0xC3,
  0xA2, 0xFE, 0x74, 0xA4, 0xDD, 0xE5, 0x45, 0x9D, 0xFF, 0x2E, 0x60, 0x4D, 0x95, 0x3E, 0x86, 0x77,
  0x1F, 0x0B, 0x84, 0xF1, 0x6C, 0xAE, 0xD6, 0x52, 0xFB, 0xD5, 0x7A, 0x18, 0xFF, 0xE1, 0xFD, 0x6C,
  0xE8, 0xAD, 0x25, 0x8E, 0x87, 0x2E, 0xC3, 0x6E, 0x2F, 0x0F, 0x71, 0xD8, 0xF8, 0x28, 0x73, 0x96,
  0xE8, 0x64, 0xFC, 0xF9, 0x35, 0x43, 0x9B, 0xFA, 0x99, 0xE7, 0x73, 0x67, 0x6E, 0x2D, 0x2F, 0xE8,
  0x57, 0x18, 0xE6, 0x98, 0x2B, 0x8C, 0x2B, 0xA3, 0xCF, 0xA4, 0x94, 0xC2, 0xCE, 0x60, 0xEE, 0x5B,
  0xBC, 0xF9, 0x94, 0xCD, 0x31, 0xCF, 0x3D, 0x6C, 0xB5, 0xAB, 0xFF, 0x91, 0x15, 0xCF, 0xDF, 0x9C,
  0xD4, 0x37, 0xC9, 0x42, 0x9B, 0x77, 0xBA, 0xED, 0x00, 0xC1, 0xA0, 0x8B, 0x18, 0x05, 0xF7, 0x4D,
  0x27, 0x0D, 0x9D, 0x4E, 0x35, 0x18, 0xE3, 0xFA, 0xE8, 0xF3, 0x04, 0x19, 0xAE, 0x42, 0x3D, 0x59,
  0x98, 0xDD, 0xD0, 0xA4, 0xDF, 0x8E, 0xE2, 0x4A, 0x77, 0x72, 0xFC, 0xED, 0x57, 0x05, 0x89, 0xA9,
  0x52, 0xB2, 0x31, 0xF9, 0x58, 0x1F, 0x64, 0xE6, 0x49, 0x49, 0x27, 0xA7, 0x04, 0xB8, 0x1A, 0x68,
  0xC2, 0x5B, 0x64, 0x07, 0x49, 0xAC, 0x24, 0x89, 0x4A, 0xB2, 0xF2, 0x8A, 0x10, 0xFA, 0xDA, 0xD1,
  0x61, 0x3F, 0x53, 0xE6, 0x63, 0x3A, 0xD4, 0x61, 0xC8, 0x6C, 0x22, 0x0D, 0x11, 0xF6, 0x99, 0x13,
  0x18, 0x9A, 0x6E, 0x82, 0x9A, 0x91, 0x98, 0x77, 0x2E, 0x49, 0x2A, 0xC5, 0xDE, 0x19, 0xB6, 0xF1,
  0x37, 0xE2, 0x6C, 0xDF, 0x70, 0x04, 0x06, 0xDB, 0xAE, 0x68, 0x7E, 0x78, 0xAA, 0x7B, 0xF6, 0xDC,
  0xC6, 0x31, 0x66, 0xC8, 0xD8, 0x3F, 0xD8, 0x8B, 0x04, 0x1F, 0x55, 0x7B, 0x6B, 0x08, 0x2C, 0xE4,
  0xA0, 0x20, 0x12, 0x1E, 0x96, 0x82, 0x7E, 0x7D, 0x5C, 0xFF, 0xFD, 0x9B, 0xD2, 0x9A, 0xE7, 0x8E,
  0xB0, 0xF3, 0xD3, 0x9B, 0x45, 0x62, 0xB8, 0xD0, 0xF8, 0xD9, 0x44, 0x13, 0x11, 0x70, 0xDD, 0x5F,
  0x7F, 0x39, 0x68, 0x3C, 0x8C, 0xB5, 0x31, 0x27, 0xB1, 0x8B, 0x76, 0x82, 0x24, 0xB3, 0x34, 0xBE,
  0xBF, 0x99, 0x4D, 0x14, 0x69, 0xA8, 0xB4, 0xE0, 0x59, 0x1A, 0x89, 0x28, 0xA3, 0x17, 0xB1, 0x06,
  0x26, 0x2F, 0xFA, 0x66, 0xF1, 0xDF, 0x6F, 0x6D, 0x5B, 0xC6, 0x52, 0xE9, 0x96, 0x04, 0x40, 0x63,
  0x94, 0x14, 0xBB, 0x8C, 0xC6, 0xED, 0x45, 0x70, 0xDC, 0xF3, 0x72, 0xEB, 0xD9, 0xEF, 0xD1, 0x66,
  0x59, 0xB4, 0xBC, 0xF2, 0x15, 0xA7, 0x63, 0x5D, 0xC4, 0x73, 0x39, 0xFA, 0x27, 0x68, 0x73, 0x85,
  0xD7, 0x1E, 0x02, 0xE0, 0x95, 0x47, 0x67, 0x59, 0xE3, 0x58, 0x1D, 0x51, 0xCB, 0x62, 0x67, 0xC4,
  0xC2, 0x79, 0xED, 0x7C, 0xBA, 0xE8, 0x37, 0x95, 0x1A, 0x85, 0x5D, 0x96, 0xE5, 0x2E, 0x9E, 0x1F,
  0xA5, 0xEB, 0xC0, 0x5F, 0xA2, 0x01, 0xF9, 0xC2, 0x3E, 0xD4, 0x14, 0x0A, 0x45, 0xDB, 0x6B, 0x03,
  0x4A, 0xA7, 0xBA, 0x7F, 0x1D, 0x27, 0x21, 0x54, 0xAF, 0xED, 0x5E, 0xA4, 0x50, 0xF1, 0x54, 0x94,
  0x65, 0xB7, 0x13, 0x01, 0x65, 0x64, 0xD5, 0xFB, 0x4A, 0xC6, 0xAA, 0x97, 0xD0, 0x47, 0x8B, 0xD5,
  0xA5, 0xEB, 0xB0, 0xA3, 0x31, 0xB6, 0xE4, 0xC0, 0xF5, 0x24, 0x4D, 0x57, 0xC8, 0xD3, 0x70, 0x74,
  0xDB, 0x8A, 0x9E, 0xCD, 0xA2, 0xAB, 0x1D, 0xD3, 0x36, 0x1E, 0x65, 0xD6, 0x88, 0xC8, 0x58, 0xF9,
  0x3B, 0x2C, 0xE6, 0x8D, 0x9A, 0x4D, 0x8D, 0x46, 0x22, 0x51, 0x05, 0xBE, 0xB9, 0xD5, 0x52, 0x4B,
  0x2A, 0x4C, 0xD6, 0x0D, 0xDF, 0xA5, 0x3B, 0xCF, 0x25, 0x29, 0x5A, 0x0A, 0x30, 0xBC, 0x35, 0x29,
  0xC0, 0x0E, 0x16, 0x20, 0xD3, 0x23, 0xEF, 0x25, 0x2E, 0x29, 0x53, 0x45, 0x19, 0xA3, 0x43, 0x38,
  0xCB, 0x1E, 0xBC, 0xAC, 0x9F, 0x7C, 0xBE, 0xA8, 0x02, 0x97, 0xC7, 0xB6, 0x8E, 0x08, 0x7C, 0x05,
  0xA4, 0xB7, 0x19, 0xFC, 0xE5, 0x5D, 0x18, 0x2B, 0x90, 0x19, 0xA7, 0x37, 0xC5, 0xB2, 0x5C, 0x78,
};

class Mangekyoo_4_5
{
public:
    DWORD GenerateKey3_1(PVOID Buf, DWORD Len);
    int   GetKeyBuf(std::vector<char>& exeKeyBuf);
    void  Decode(PVOID Buf, DWORD Len, DWORD Key);
    int   Decode_Sub1(DWORD dwSeed, PDWORD arrDecode, PDWORD pSubFlag);
    int   DecodeKeyFileData(PVOID PackData, const PACKIDX& Idx);
    int   DecodeFileData(PVOID PackData, const PACKIDX& Idx, const void* secretTable);
    int   HandleDPNG(PBYTE Data, DWORD Len, const wchar_t *CurDir, const wchar_t *UniName);

    int   GetPackageDirectory(const HANDLE hPack, const PACKHEADER *ph, std::vector<PACKIDX>& Idx);
    int   ExtractResource(const PACKHEADER& ph, const HANDLE hPack, const std::vector<PACKIDX>& Idx, const wchar_t *CurDir, const wchar_t *PackName);
    int   Entrance(const wchar_t *CurDir, const wchar_t *PackName);
};


namespace utils
{

}

extern wchar_t g_ExePath[MAX_PATH];
extern wchar_t g_KeyPath[MAX_PATH];


extern void AppendMsg(const wchar_t *MsgBuf);